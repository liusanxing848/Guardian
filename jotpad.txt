----Note for Jenkins----
jenkins needs java, have to install java
install java: sudo yum install java
check java version: java -version

-----Install Jenkins----
2f55c280782045b88152af21b1f6e3e7

sudo wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io-2023.key
sudo yum upgrade
# Add required dependencies for the jenkins package
sudo yum install fontconfig java-17-openjdk
sudo yum install jenkins

----Jenkis operations----
check if is running: sudo systemctl status jenkins
fire up jenkins (start): sudo systemctl start jenkins
shut down jenkins: sudo systemctl stop jenkins
enable Jenkins to start on boot: sudo systemctl enable jenkins
check the machine is set start jenkins on boot: sudo systemctl is-enabled jenkins
disable jenkins on boot: sudo systemctl disable jenkins
connect to jenkins cli: wget http://34.216.203.164:8080/jnlpJars/jenkins-cli.jar



----Docker---
check current running container: docker ps
stop all container: $(docker ps -aq)
remove all container: docker rm $(docker ps -aq)
remove all images: docker rmi $(docker images -q)

start the container: docker start <container_name>
stop the container: doker kill <container_name>


--nuget--
AWSSDK.KeyManagementService
AWSSDK.RDS
MySql.Data
Newtonsoft.Json
System.IdentityModel.Tokens.Jwt
YamlDotNet



Dev not:
8-March: 
stopping point, succesfully can get public key, and token. 
token payload is empty, try to put the token payload value into it. 
for example, token expiration time, time creation, sub(asscociate with any id?), scope? is SSO? being used?
do I have to create a new db to store these token? or issued token? how about create token_control_number
use this control number pluse clientid, plus token and token's info store into a db, and then query this db
to verify?

10-March:
Completed: getAccessToken endpoint
feature: create access token obj, and create refreshToken object then attach the refresh token to the accessToken
need more work:
current refresh token can create multiple active record associat with one clientId, thus one client can have many refresh tokens
design a feature that if creating new client, check current client has a refresh token, if true, no more refresh token.

11-MARCH
Completed: verifyJWTToken endpoint
feature: will delegate to verify the jwt token without client send public key, also, have to keep in mind that
have to provide to client a way to verify JTW by themselves with the pulbic key we provided.
Fixed bug: when renewed access_token issued/refreshed, the expiration date is not displayed properly in the
JWT payload, because the expiration date is not been giving any value, however over the mySQL DB, this value has
been properly set up, the bug will result publishing wrong info, and also will result JWT token value looks exactly
the same everytime refresh the token, in theory, the jwt token should be different everytime becuase of the time stamp
in the access_token should be different every time
Future feature: next time should add new feature that that refresh token to get new access_token. 
but keep in mind: currently, when giving out any access_token either from refresh or issue new one, there's no validation
for the refresh token, this feature should add into the logi flow.
And also should expose new enpoint, or guide customer to retrieve new access-token to get new refersh token.
also, add access_token retro, and refresh token retro endpoint

12-MARCH
Completed: every time get token by sending client-credentials, the app will do a deep cleaning for accessToken and refreshToken DB
all expired, and state should not active records will turn to isActive = false, since there were no implemenation on the isActive turning int
inactive. 
Future Feature (next day task): 
implement:
-check current access_token [update: completed]
-check current refresh_token [update: completed]
-revoke current access_token
-revoke current refresh_token
-refresh access_token by the refreshtoken
docker command build a container from image: docker run --name guardian_midterm_container -d -p 9090:8080 guardian_midterm
then start the container: docker start [containerId]
Port change: 9090 or 9091?


13-Mar
Completed: Implemented revoke access token service, and publish the endpoint. 
fix some bug that Query does not contain proper space and results in syntax error, so in the future the query should use @ in front of the double quotation.

todo: 
revoke refresh token, 
refresh token to fresh current access token. 

14-Mar
Completed: Revoke Refresh Token(from back to front)
todo:
refresh token to get new access token